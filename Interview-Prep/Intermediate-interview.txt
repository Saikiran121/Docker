01. Explain how Docker works under the hood?
    - Docker is a containerization platform that allows developers to package applications with all their dependencies into standardized 
      units called containers. Under the hood, Docker uses several Linux Kernel features and components to achieve lightweight, isolated 
      environments without the overhead of traditional virtual machienes.
    
    - Docker architecture overview 
      your app --> Docker CLI --> Docker Engine --> Containers 
      Docker Daemon --> Containerd --> runc
    
    - Docker CLI: User interface to communicate with Docker Daemon (Docker Commands)
    - Docker Daemon: Background process (dockerd) that manage

02. What’s the difference between a Docker image and a container?

03. What is the layered architecture of Docker images?

04. What happens when you run docker run? Walk through each step.

05. Explain the difference between ENTRYPOINT and CMD. When would you use each?

06. Why is Docker considered more efficient than traditional VMs?

07. What are the best practices when writing a Dockerfile?

08. How do you minimize image size in a production environment?

09. What is a multi-stage build and how have you used it?

10. What’s the impact of layer ordering in Dockerfiles?

11. How do COPY and ADD differ, and when should you use one over the other?

12. What’s the purpose of .dockerignore and how does it affect builds?

13. How do you handle Docker image versioning in CI/CD pipelines?

14. How do you securely store and manage Docker images?

15. What tools or commands do you use to scan Docker images for vulnerabilities?

16. How do you clean up unused Docker images and containers safely?

17. Explain the use of docker inspect in debugging issues.

18. What is the difference between bind mounts, volumes, and tmpfs?

19. How do you persist data in Docker containers?

20. How do you configure inter-container communication in Docker networks?

21. What are the different Docker network types and their use cases?

22. Have you ever debugged a networking issue between Docker containers? How?

23. Explain how Docker Compose works. How is it used in a CI/CD pipeline?

24. What’s the difference between depends_on and actual service health checks in Compose?

25. How would you orchestrate a three-tier architecture using Docker Compose?

26. Your container is crashing with a non-zero exit code. How do you debug it?

27.You made a code change, rebuilt the container, but changes aren’t reflected. Why?

30. A container works on your machine but fails in staging. What steps do you take to diagnose it?

31. How do you limit CPU and memory usage for a container?

32. Explain how Docker handles DNS resolution between containers.

33. Why is it important to not run containers as root? How do you enforce it?

34. How do you handle secrets in a Dockerized application?

35. What is Docker Content Trust (DCT) and how does it improve security?

36. What’s the impact of using :latest tag in production?

37. How do you ensure your Dockerfiles don’t introduce vulnerabilities?

38. How do you use Docker in CI/CD pipelines?

39. What’s your experience with deploying Dockerized applications to Kubernetes or ECS?

40. What are the trade-offs of using Docker Swarm vs Kubernetes?

41. How do you handle container logging in production environments?

42. How do you roll back a Docker-based deployment in case of failure?






